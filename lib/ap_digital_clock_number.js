/**
 * Number for digital clock.
 * @constructor ApDigitalClockNumber
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      classnames = require('classnames'),
      ApDigitalClockNumberBar = require('./ap_digital_clock_number_bar');

/** @lends ApDigitalClockNumber */
let ApDigitalClockNumber = React.createClass({
    displayName: 'ApDigitalClockNumber',

    //--------------------
    // Specs
    //--------------------

    propTypes: {
        value: types.number
    },

    statics: {
        highlightWithNumber: function (value) {
            switch (value) {
                case 0:
                    return [true, true, true, true, true, true, true];
                case 1:
                    return [false, true, true, false, false, false, false];
                case 2:
                    return [true, true, false, true, false, false];
                default:
                    return [];
            }
        }
    },

    getDefaultProps: function () {
        return {
            value: 8
        };
    },

    render: function () {
        let s = this,
            props = s.props;

        let Bar = ApDigitalClockNumber.Bar;

        var highlights = ApDigitalClockNumber.highlightWithNumber(props.value);
        let bars = highlights.map((highlighed, i) => {
            return React.createElement(ApDigitalClockNumberBar, { highlighed: highlighed,
                key: 'bar-highlight-' + i,
                className: classnames('ap-digital-clock-number-bar-' + i)
            });
        });

        return React.createElement(
            'div',
            { className: classnames("ap-digital-clock-number", props.className) },
            bars
        );
    }
});

module.exports = ApDigitalClockNumber;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9kaWdpdGFsX2Nsb2NrX251bWJlci5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSxZQUFZLENBQUM7O0FBRWIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztNQUMxQixLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVM7TUFDdkIsVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7TUFDbEMsdUJBQXVCLEdBQUcsT0FBTyxDQUFDLCtCQUErQixDQUFDOzs7QUFBQyxBQUd2RSxJQUFJLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7Ozs7Ozs7QUFNekMsYUFBUyxFQUFFO0FBQ1AsYUFBSyxFQUFFLEtBQUssQ0FBQyxNQUFNO0tBQ3RCOztBQUVELFdBQU8sRUFBRTtBQUNMLDJCQUFtQixFQUFFLFVBQVUsS0FBSyxFQUFFO0FBQ2xDLG9CQUFRLEtBQUs7QUFDVCxxQkFBSyxDQUFDO0FBQ0YsMkJBQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUFBLEFBQ3RELHFCQUFLLENBQUM7QUFDRiwyQkFBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQUEsQUFDM0QscUJBQUssQ0FBQztBQUNGLDJCQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUFBLEFBQ25EO0FBQ0ksMkJBQU8sRUFBRSxDQUFDO0FBQUEsYUFDakI7U0FDSjtLQUNKOztBQUVELG1CQUFlLEVBQUUsWUFBWTtBQUN6QixlQUFPO0FBQ0gsaUJBQUssRUFBRSxDQUFDO1NBQ1gsQ0FBQTtLQUNKOztBQUVELFVBQU0sRUFBRSxZQUFZO0FBQ2hCLFlBQUksQ0FBQyxHQUFHLElBQUk7WUFDUixLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFcEIsWUFBSSxHQUFHLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDOztBQUVuQyxZQUFJLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkUsWUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUk7QUFDeEMsbUJBQ0ksb0JBQUMsdUJBQXVCLElBQUMsVUFBVSxFQUFFLFVBQVUsQUFBQztBQUN2QixtQkFBRyxFQUFFLGdCQUFnQixHQUFHLENBQUMsQUFBQztBQUMxQix5QkFBUyxFQUFFLFVBQVUsQ0FBQyw4QkFBOEIsR0FBRyxDQUFDLENBQUMsQUFBQztjQUN4RCxDQUM3QjtTQUNMLENBQUMsQ0FBQzs7QUFFSCxlQUNJOztjQUFLLFNBQVMsRUFBRSxVQUFVLENBQUMseUJBQXlCLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxBQUFDO1lBQ2xFLElBQUk7U0FDSCxDQUNUO0tBQ0o7Q0FDSixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyIsImZpbGUiOiJhcF9kaWdpdGFsX2Nsb2NrX251bWJlci5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvb2t1bmlzaGl0YWthL3Byb2plY3RzL2FwZW1hbi1yZWFjdC1sYWJvL2FwZW1hbi1yZWFjdC1jbG9jay9saWIvanN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBOdW1iZXIgZm9yIGRpZ2l0YWwgY2xvY2suXG4gKiBAY29uc3RydWN0b3IgQXBEaWdpdGFsQ2xvY2tOdW1iZXJcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHR5cGVzID0gUmVhY3QuUHJvcFR5cGVzLFxuICAgIGNsYXNzbmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyksXG4gICAgQXBEaWdpdGFsQ2xvY2tOdW1iZXJCYXIgPSByZXF1aXJlKCcuL2FwX2RpZ2l0YWxfY2xvY2tfbnVtYmVyX2JhcicpO1xuXG4vKiogQGxlbmRzIEFwRGlnaXRhbENsb2NrTnVtYmVyICovXG5sZXQgQXBEaWdpdGFsQ2xvY2tOdW1iZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gU3BlY3NcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgdmFsdWU6IHR5cGVzLm51bWJlclxuICAgIH0sXG5cbiAgICBzdGF0aWNzOiB7XG4gICAgICAgIGhpZ2hsaWdodFdpdGhOdW1iZXI6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHRydWUsIHRydWUsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgdHJ1ZSwgZmFsc2UsIHRydWUsIGZhbHNlLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IDhcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHMgPSB0aGlzLFxuICAgICAgICAgICAgcHJvcHMgPSBzLnByb3BzO1xuXG4gICAgICAgIGxldCBCYXIgPSBBcERpZ2l0YWxDbG9ja051bWJlci5CYXI7XG5cbiAgICAgICAgdmFyIGhpZ2hsaWdodHMgPSBBcERpZ2l0YWxDbG9ja051bWJlci5oaWdobGlnaHRXaXRoTnVtYmVyKHByb3BzLnZhbHVlKTtcbiAgICAgICAgbGV0IGJhcnMgPSBoaWdobGlnaHRzLm1hcCgoaGlnaGxpZ2hlZCwgaSk9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxBcERpZ2l0YWxDbG9ja051bWJlckJhciBoaWdobGlnaGVkPXtoaWdobGlnaGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9eydiYXItaGlnaGxpZ2h0LScgKyBpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ2FwLWRpZ2l0YWwtY2xvY2stbnVtYmVyLWJhci0nICsgaSl9XG4gICAgICAgICAgICAgICAgPjwvQXBEaWdpdGFsQ2xvY2tOdW1iZXJCYXI+XG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoXCJhcC1kaWdpdGFsLWNsb2NrLW51bWJlclwiLCBwcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICB7YmFyc31cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBEaWdpdGFsQ2xvY2tOdW1iZXI7XG4iXX0=