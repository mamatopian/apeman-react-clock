/**
 * Style for ApClock.
 * @constructor ApAnalogClockStyle
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApAnalogClockStyle */
let ApAnalogClockStyle = React.createClass({
    displayName: 'ApAnalogClockStyle',

    propTypes: {
        scoped: types.bool,
        style: types.object,
        minSize: types.number,
        maxSize: types.number,
        color: types.string
    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {},
            minSize: 80,
            maxSize: 480,
            color: '#555'
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let minSize = props.minSize,
            maxSize = props.maxSize,
            color = props.color;

        let data = {

            '.ap-analog-clock': {
                minWidth: minSize,
                minHeight: minSize,
                maxWidth: maxSize,
                maxHeight: maxSize,
                display: `block`,
                textAlign: 'center'
            },
            '.ap-analog-clock-board': {
                width: `100%`,
                height: `100%`,
                border: `2px solid ${ color }`,
                display: `inline-block`,
                position: `relative`,
                borderRadius: `50%`
            },
            '.ap-analog-letter-container': {
                height: `50%`,
                width: `10%`,
                position: `absolute`,
                left: `45%`,
                top: `0`,
                display: `inline-block`,
                transformOrigin: `50% 100%`
            },
            '.ap-analog-letter': {
                position: `absolute`,
                left: `0`,
                top: `0`,
                display: `inline-block`
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApAnalogClockStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9hbmFsb2dfY2xvY2tfc3R5bGUuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsWUFBWSxDQUFDOztBQUViLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7TUFDMUIsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTO01BQ3ZCLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO01BQzFCLE9BQU8sR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLENBQUM7OztBQUFDLEFBR3ZELElBQUksa0JBQWtCLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7O0FBQ3ZDLGFBQVMsRUFBRTtBQUNQLGNBQU0sRUFBRSxLQUFLLENBQUMsSUFBSTtBQUNsQixhQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU07QUFDbkIsZUFBTyxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3JCLGVBQU8sRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNyQixhQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU07S0FDdEI7QUFDRCxtQkFBZSxFQUFFLFlBQVk7QUFDekIsZUFBTztBQUNILGtCQUFNLEVBQUUsS0FBSztBQUNiLGlCQUFLLEVBQUUsRUFBRTtBQUNULG1CQUFPLEVBQUUsRUFBRTtBQUNYLG1CQUFPLEVBQUUsR0FBRztBQUNaLGlCQUFLLEVBQUUsTUFBTTtTQUNoQixDQUFBO0tBQ0o7QUFDRCxVQUFNLEVBQUUsWUFBWTtBQUNoQixZQUFJLENBQUMsR0FBRyxJQUFJO1lBQ1IsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRXBCLFlBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPO1lBQ3ZCLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTztZQUN2QixLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQzs7QUFFeEIsWUFBSSxJQUFJLEdBQUc7O0FBRUgsOEJBQWtCLEVBQUU7QUFDaEIsd0JBQVEsRUFBRSxPQUFPO0FBQ2pCLHlCQUFTLEVBQUUsT0FBTztBQUNsQix3QkFBUSxFQUFFLE9BQU87QUFDakIseUJBQVMsRUFBRSxPQUFPO0FBQ2xCLHVCQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDaEIseUJBQVMsRUFBRSxRQUFRO2FBQ3RCO0FBQ0Qsb0NBQXdCLEVBQUU7QUFDdEIscUJBQUssRUFBRSxDQUFDLElBQUksQ0FBQztBQUNiLHNCQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDZCxzQkFBTSxFQUFFLENBQUMsVUFBVSxHQUFFLEtBQUssRUFBQyxDQUFDO0FBQzVCLHVCQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7QUFDdkIsd0JBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNwQiw0QkFBWSxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ3RCO0FBQ0QseUNBQTZCLEVBQUU7QUFDM0Isc0JBQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNiLHFCQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDWix3QkFBUSxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ3BCLG9CQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDWCxtQkFBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1IsdUJBQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztBQUN2QiwrQkFBZSxFQUFFLENBQUMsUUFBUSxDQUFDO2FBQzlCO0FBQ0QsK0JBQW1CLEVBQUU7QUFDakIsd0JBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNwQixvQkFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1QsbUJBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNSLHVCQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7YUFDMUI7U0FDSjtZQUNELGNBQWMsR0FBRyxFQUFFO1lBQ25CLGVBQWUsR0FBRyxFQUFFO1lBQ3BCLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDeEIsZUFDSTtBQUFDLG1CQUFPO2NBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEFBQUM7QUFDckIsb0JBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQUFBQztBQUNoQyw4QkFBYyxFQUFFLGNBQWMsQUFBQztBQUMvQiwrQkFBZSxFQUFFLGVBQWUsQUFBQztBQUNqQyw4QkFBYyxFQUFFLGNBQWMsQUFBQzs7WUFDdEMsS0FBSyxDQUFDLFFBQVE7U0FBVyxDQUM3QjtLQUNMO0NBQ0osQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUMiLCJmaWxlIjoiYXBfYW5hbG9nX2Nsb2NrX3N0eWxlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9va3VuaXNoaXRha2EvcHJvamVjdHMvYXBlbWFuLXJlYWN0LWxhYm8vYXBlbWFuLXJlYWN0LWNsb2NrL2xpYi9qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0eWxlIGZvciBBcENsb2NrLlxuICogQGNvbnN0cnVjdG9yIEFwQW5hbG9nQ2xvY2tTdHlsZVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdHlwZXMgPSBSZWFjdC5Qcm9wVHlwZXMsXG4gICAgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJyksXG4gICAgQXBTdHlsZSA9IHJlcXVpcmUoJ2FwZW1hbi1yZWFjdC1zdHlsZScpWydBcFN0eWxlJ107XG5cbi8qKiBAbGVuZHMgQXBBbmFsb2dDbG9ja1N0eWxlICovXG5sZXQgQXBBbmFsb2dDbG9ja1N0eWxlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIHByb3BUeXBlczoge1xuICAgICAgICBzY29wZWQ6IHR5cGVzLmJvb2wsXG4gICAgICAgIHN0eWxlOiB0eXBlcy5vYmplY3QsXG4gICAgICAgIG1pblNpemU6IHR5cGVzLm51bWJlcixcbiAgICAgICAgbWF4U2l6ZTogdHlwZXMubnVtYmVyLFxuICAgICAgICBjb2xvcjogdHlwZXMuc3RyaW5nXG4gICAgfSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlZDogZmFsc2UsXG4gICAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgICBtaW5TaXplOiA4MCxcbiAgICAgICAgICAgIG1heFNpemU6IDQ4MCxcbiAgICAgICAgICAgIGNvbG9yOiAnIzU1NSdcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBzID0gdGhpcyxcbiAgICAgICAgICAgIHByb3BzID0gcy5wcm9wcztcblxuICAgICAgICBsZXQgbWluU2l6ZSA9IHByb3BzLm1pblNpemUsXG4gICAgICAgICAgICBtYXhTaXplID0gcHJvcHMubWF4U2l6ZSxcbiAgICAgICAgICAgIGNvbG9yID0gcHJvcHMuY29sb3I7XG5cbiAgICAgICAgbGV0IGRhdGEgPSB7XG5cbiAgICAgICAgICAgICAgICAnLmFwLWFuYWxvZy1jbG9jayc6IHtcbiAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IG1pblNpemUsXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogbWluU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6IG1heFNpemUsXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogbWF4U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC1hbmFsb2ctY2xvY2stYm9hcmQnOiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBgMTAwJWAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogYDEwMCVgLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IGAycHggc29saWQgJHtjb2xvcn1gLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgaW5saW5lLWJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGByZWxhdGl2ZWAsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogYDUwJWBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtYW5hbG9nLWxldHRlci1jb250YWluZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogYDUwJWAsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBgMTAlYCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGBhYnNvbHV0ZWAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGA0NSVgLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IGAwYCxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogYDUwJSAxMDAlYFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC1hbmFsb2ctbGV0dGVyJzoge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYGFic29sdXRlYCxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogYDBgLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IGAwYCxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc21hbGxNZWRpYURhdGEgPSB7fSxcbiAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YSA9IHt9LFxuICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGEgPSB7fTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcFN0eWxlIHNjb3BlZD17cHJvcHMuc2NvcGVkfVxuICAgICAgICAgICAgICAgICAgICAgZGF0YT17ZXh0ZW5kKGRhdGEsIHByb3BzLnN0eWxlKX1cbiAgICAgICAgICAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhPXtzbWFsbE1lZGlhRGF0YX1cbiAgICAgICAgICAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YT17bWVkaXVtTWVkaWFEYXRhfVxuICAgICAgICAgICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGE9e2xhcmdlTWVkaWFEYXRhfVxuICAgICAgICAgICAgPntwcm9wcy5jaGlsZHJlbn08L0FwU3R5bGU+XG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBBbmFsb2dDbG9ja1N0eWxlO1xuIl19