/**
 * Analog clock.
 * @constructor ApAnalogClock
 */

"use strict";

const React = require('react'),
      ReactDOM = require('react-dom'),
      classnames = require('classnames'),
      ApClock = require('./ap_clock'),
      PureRenderMixin = require('react-addons-pure-render-mixin'),
      chopcal = require('chopcal'),
      numcal = require('numcal'),
      types = React.PropTypes,
      ApAnalogClockHand = require('./ap_analog_clock_hand'),
      ApAnalogClockLetter = require('./ap_analog_clock_letter');

/** @lends ApAnalogClock */
let ApAnalogClock = React.createClass({
    displayName: 'ApAnalogClock',

    //--------------------
    // Specs
    //--------------------

    propTypes: {
        boardLetters: types.array
    },

    mixins: [PureRenderMixin],

    statics: {
        _angleForValue: function (value, max) {
            let rate = value % max / max;
            return chopcal.round(rate * 360, 0.1);
        },
        hourHandAngle: function (date) {
            let hours = date.getHours();
            return ApAnalogClock._angleForValue(hours, 12);
        },
        minuteHandAngle: function (date) {
            let minutes = date.getMinutes();
            return ApAnalogClock._angleForValue(minutes, 60);
        },
        secondHandAngle: function (date) {
            let seconds = date.getSeconds();
            return ApAnalogClock._angleForValue(seconds, 60);
        },
        letterAngle: function (i, count) {
            return ApAnalogClock._angleForValue(i, count);
        }
    },

    getInitialState: function () {
        return {
            hour: 0,
            minute: 0,
            second: 0,
            size: 256
        };
    },

    getDefaultProps: function () {
        return {
            boardLetters: '12,1,2,3,4,5,6,7,8,9,10,11'.split(',')
        };
    },

    render: function () {
        let s = this,
            state = s.state,
            props = s.props;

        let letters = props.boardLetters.map((letter, i, letters) => {
            let angle = ApAnalogClock.letterAngle(i, letters.length);
            return React.createElement(ApAnalogClockLetter, { key: "ap-analog-letter-" + i,
                letter: letter,
                angle: angle });
        });

        return React.createElement(
            ApClock,
            { className: classnames("ap-analog-clock", props.className) },
            React.createElement(
                'div',
                { className: 'ap-analog-clock-board', style: { width: state.size, height: state.size } },
                React.createElement(
                    'div',
                    { className: 'ap-analog-clock-board-inner' },
                    React.createElement(ApAnalogClockHand, { width: 4, heightRate: 0.8, angle: state.hour }),
                    React.createElement(ApAnalogClockHand, { width: 4, heightRate: 1, angle: state.minute }),
                    React.createElement(ApAnalogClockHand, { width: 2, heightRate: 1, angle: state.second })
                ),
                React.createElement(
                    'div',
                    null,
                    letters
                )
            )
        );
    },

    //--------------------
    // Lifecycle
    //--------------------

    componentWillMount: function () {
        let s = this;
        s._looping = true;
    },

    componentDidMount: function () {
        let s = this,
            props = s.props;

        function _loop() {
            if (!s._looping) {
                return;
            }
            let now = new Date();
            s.setState({
                hour: ApAnalogClock.hourHandAngle(now),
                minute: ApAnalogClock.minuteHandAngle(now),
                second: ApAnalogClock.secondHandAngle(now)
            });
            window.requestAnimationFrame(_loop);
        }

        window.addEventListener('resize', s.resizeClock);
        _loop();
        s.resizeClock();
    },

    componentWillReceiveProps: function (nextProps) {
        let s = this;
    },

    componentWillUpdate: function (nextProps, nextState) {
        let s = this;
    },

    componentDidUpdate: function (prevProps, prevState) {
        let s = this;
    },

    componentWillUnmount: function () {
        let s = this;
        window.removeEventListener('resize', s.resizeClock);
        s._looping = false;
    },

    //------------------
    // Helper
    //------------------

    resizeClock: function () {
        let s = this,
            elm = ReactDOM.findDOMNode(s);
        let size = numcal.min(elm.offsetWidth, elm.offsetHeight);
        s.setState({
            size: size
        });
    }
    //------------------
    // Private
    //------------------
});

module.exports = ApAnalogClock;
//# sourceMappingURL=data:application/json;base64,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LEdBQUcsS0FBSyxDQUFDO0tBQ3RCOzs7Ozs7QUFNRCxlQUFXLEVBQUUsWUFBWTtBQUNyQixZQUFJLENBQUMsR0FBRyxJQUFJO1lBQ1IsR0FBRyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEMsWUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN6RCxTQUFDLENBQUMsUUFBUSxDQUFDO0FBQ1AsZ0JBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0tBQ047Ozs7QUFBQSxDQUlKLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyIsImZpbGUiOiJhcF9hbmFsb2dfY2xvY2suanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL29rdW5pc2hpdGFrYS9wcm9qZWN0cy9hcGVtYW4tcmVhY3QtbGFiby9hcGVtYW4tcmVhY3QtY2xvY2svbGliL2pzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQW5hbG9nIGNsb2NrLlxuICogQGNvbnN0cnVjdG9yIEFwQW5hbG9nQ2xvY2tcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyksXG4gICAgY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKSxcbiAgICBBcENsb2NrID0gcmVxdWlyZSgnLi9hcF9jbG9jaycpLFxuICAgIFB1cmVSZW5kZXJNaXhpbiA9IHJlcXVpcmUoJ3JlYWN0LWFkZG9ucy1wdXJlLXJlbmRlci1taXhpbicpLFxuICAgIGNob3BjYWwgPSByZXF1aXJlKCdjaG9wY2FsJyksXG4gICAgbnVtY2FsID0gcmVxdWlyZSgnbnVtY2FsJyksXG4gICAgdHlwZXMgPSBSZWFjdC5Qcm9wVHlwZXMsXG4gICAgQXBBbmFsb2dDbG9ja0hhbmQgPSByZXF1aXJlKCcuL2FwX2FuYWxvZ19jbG9ja19oYW5kJyksXG4gICAgQXBBbmFsb2dDbG9ja0xldHRlciA9IHJlcXVpcmUoJy4vYXBfYW5hbG9nX2Nsb2NrX2xldHRlcicpO1xuXG4vKiogQGxlbmRzIEFwQW5hbG9nQ2xvY2sgKi9cbmxldCBBcEFuYWxvZ0Nsb2NrID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFNwZWNzXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIGJvYXJkTGV0dGVyczogdHlwZXMuYXJyYXlcbiAgICB9LFxuXG4gICAgbWl4aW5zOiBbXG4gICAgICAgIFB1cmVSZW5kZXJNaXhpblxuICAgIF0sXG5cbiAgICBzdGF0aWNzOiB7XG4gICAgICAgIF9hbmdsZUZvclZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1heCkge1xuICAgICAgICAgICAgbGV0IHJhdGUgPSAodmFsdWUgJSBtYXgpIC8gbWF4O1xuICAgICAgICAgICAgcmV0dXJuIGNob3BjYWwucm91bmQocmF0ZSAqIDM2MCwgMC4xKTtcbiAgICAgICAgfSxcbiAgICAgICAgaG91ckhhbmRBbmdsZTogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgIHJldHVybiBBcEFuYWxvZ0Nsb2NrLl9hbmdsZUZvclZhbHVlKGhvdXJzLCAxMik7XG4gICAgICAgIH0sXG4gICAgICAgIG1pbnV0ZUhhbmRBbmdsZTogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgIGxldCBtaW51dGVzID0gZGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICByZXR1cm4gQXBBbmFsb2dDbG9jay5fYW5nbGVGb3JWYWx1ZShtaW51dGVzLCA2MCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlY29uZEhhbmRBbmdsZTogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgIGxldCBzZWNvbmRzID0gZGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICByZXR1cm4gQXBBbmFsb2dDbG9jay5fYW5nbGVGb3JWYWx1ZShzZWNvbmRzLCA2MCk7XG4gICAgICAgIH0sXG4gICAgICAgIGxldHRlckFuZ2xlOiBmdW5jdGlvbiAoaSwgY291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBBcEFuYWxvZ0Nsb2NrLl9hbmdsZUZvclZhbHVlKGksIGNvdW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhvdXI6IDAsXG4gICAgICAgICAgICBtaW51dGU6IDAsXG4gICAgICAgICAgICBzZWNvbmQ6IDAsXG4gICAgICAgICAgICBzaXplOiAyNTZcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBib2FyZExldHRlcnM6ICcxMiwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMScuc3BsaXQoJywnKVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHMgPSB0aGlzLFxuICAgICAgICAgICAgc3RhdGUgPSBzLnN0YXRlLFxuICAgICAgICAgICAgcHJvcHMgPSBzLnByb3BzO1xuXG4gICAgICAgIGxldCBsZXR0ZXJzID0gcHJvcHMuYm9hcmRMZXR0ZXJzLm1hcCgobGV0dGVyLCBpLCBsZXR0ZXJzKT0+IHtcbiAgICAgICAgICAgIGxldCBhbmdsZSA9IEFwQW5hbG9nQ2xvY2subGV0dGVyQW5nbGUoaSwgbGV0dGVycy5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8QXBBbmFsb2dDbG9ja0xldHRlciBrZXk9e1wiYXAtYW5hbG9nLWxldHRlci1cIiArIGl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVyPXtsZXR0ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5nbGU9e2FuZ2xlfT48L0FwQW5hbG9nQ2xvY2tMZXR0ZXI+XG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFwQ2xvY2sgY2xhc3NOYW1lPXtjbGFzc25hbWVzKFwiYXAtYW5hbG9nLWNsb2NrXCIsIHByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXAtYW5hbG9nLWNsb2NrLWJvYXJkXCIgc3R5bGU9e3t3aWR0aDpzdGF0ZS5zaXplLCBoZWlnaHQ6c3RhdGUuc2l6ZX19PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFwLWFuYWxvZy1jbG9jay1ib2FyZC1pbm5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEFwQW5hbG9nQ2xvY2tIYW5kIHdpZHRoPXs0fSBoZWlnaHRSYXRlPXswLjh9IGFuZ2xlPXtzdGF0ZS5ob3VyfT48L0FwQW5hbG9nQ2xvY2tIYW5kPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEFwQW5hbG9nQ2xvY2tIYW5kIHdpZHRoPXs0fSBoZWlnaHRSYXRlPXsxfSBhbmdsZT17c3RhdGUubWludXRlfT48L0FwQW5hbG9nQ2xvY2tIYW5kPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEFwQW5hbG9nQ2xvY2tIYW5kIHdpZHRoPXsyfSBoZWlnaHRSYXRlPXsxfSBhbmdsZT17c3RhdGUuc2Vjb25kfT48L0FwQW5hbG9nQ2xvY2tIYW5kPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtsZXR0ZXJzfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQXBDbG9jaz5cbiAgICAgICAgKTtcbiAgICB9LFxuXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gTGlmZWN5Y2xlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBzID0gdGhpcztcbiAgICAgICAgcy5fbG9vcGluZyA9IHRydWU7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBzID0gdGhpcyxcbiAgICAgICAgICAgIHByb3BzID0gcy5wcm9wcztcblxuICAgICAgICBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgICAgICAgIGlmICghcy5fbG9vcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaG91cjogQXBBbmFsb2dDbG9jay5ob3VySGFuZEFuZ2xlKG5vdyksXG4gICAgICAgICAgICAgICAgbWludXRlOiBBcEFuYWxvZ0Nsb2NrLm1pbnV0ZUhhbmRBbmdsZShub3cpLFxuICAgICAgICAgICAgICAgIHNlY29uZDogQXBBbmFsb2dDbG9jay5zZWNvbmRIYW5kQW5nbGUobm93KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKF9sb29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzLnJlc2l6ZUNsb2NrKTtcbiAgICAgICAgX2xvb3AoKTtcbiAgICAgICAgcy5yZXNpemVDbG9jaygpO1xuICAgIH0sXG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICAgIGxldCBzID0gdGhpcztcbiAgICB9LFxuXG4gICAgY29tcG9uZW50V2lsbFVwZGF0ZTogZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIGxldCBzID0gdGhpcztcbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgbGV0IHMgPSB0aGlzO1xuICAgIH0sXG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcyA9IHRoaXM7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzLnJlc2l6ZUNsb2NrKTtcbiAgICAgICAgcy5fbG9vcGluZyA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEhlbHBlclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICByZXNpemVDbG9jazogZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcyA9IHRoaXMsXG4gICAgICAgICAgICBlbG0gPSBSZWFjdERPTS5maW5kRE9NTm9kZShzKTtcbiAgICAgICAgbGV0IHNpemUgPSBudW1jYWwubWluKGVsbS5vZmZzZXRXaWR0aCwgZWxtLm9mZnNldEhlaWdodCk7XG4gICAgICAgIHMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBQcml2YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwQW5hbG9nQ2xvY2s7XG4iXX0=