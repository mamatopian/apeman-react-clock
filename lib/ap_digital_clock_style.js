/**
 * Style for ApDigitalClock
 * @constructor ApDigitalClock
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApDigitalClock */
let ApDigitalClock = React.createClass({
    displayName: 'ApDigitalClock',

    propTypes: {
        scoped: types.bool,
        style: types.object,
        width: types.number,
        height: types.number,
        color: types.string,
        backgroundColor: types.string

    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {},
            width: 340,
            height: 240,
            color: '#333',
            backgroundColor: '#FFF'
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let width = props.width,
            height = props.height,
            color = props.color,
            backgroundColor = props.backgroundColor;

        let data = {
            '.ap-digital-clock': {
                color: color,
                width: width,
                height: height,
                display: `block`,
                margin: `0 auto`,
                textAlign: 'center'
            },
            '.ap-digital-clock-board': {
                backgroundColor: backgroundColor,
                display: `inline-block`,
                border: `2px solid ${ color }`,
                position: `relative`,
                background: `${ backgroundColor }`
            },
            '.ap-digital-clock-board-inner': {
                position: `absolute`,
                left: 0,
                right: 0,
                top: `30%`,
                bottom: `30%`
            },
            '.ap-digital-clock-dummy-text': {
                opacity: 0,
                width: 1,
                display: `inline-block`
            },
            '.ap-digital-clock-main-display': {},
            '.ap-digital-clock-sub-display': {
                textAlign: 'right'
            },
            '.ap-digital-clock-sub-label': {
                display: `block`,
                margin: `0 auto`
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApDigitalClock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9kaWdpdGFsX2Nsb2NrX3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUztNQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUMxQixPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDOzs7QUFBQyxBQUd2RCxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDbkMsYUFBUyxFQUFFO0FBQ1AsY0FBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQixhQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU07QUFDbkIsY0FBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3BCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQix1QkFBZSxFQUFFLEtBQUssQ0FBQyxNQUFNOztLQUVoQztBQUNELG1CQUFlLEVBQUUsWUFBWTtBQUN6QixlQUFPO0FBQ0gsa0JBQU0sRUFBRSxLQUFLO0FBQ2IsaUJBQUssRUFBRSxFQUFFO0FBQ1QsaUJBQUssRUFBRSxHQUFHO0FBQ1Ysa0JBQU0sRUFBRSxHQUFHO0FBQ1gsaUJBQUssRUFBRSxNQUFNO0FBQ2IsMkJBQWUsRUFBRSxNQUFNO1NBQzFCLENBQUE7S0FDSjtBQUNELFVBQU0sRUFBRSxZQUFZO0FBQ2hCLFlBQUksQ0FBQyxHQUFHLElBQUk7WUFDUixLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFcEIsWUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUs7WUFDbkIsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNO1lBQ3JCLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSztZQUNuQixlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7QUFFNUMsWUFBSSxJQUFJLEdBQUc7QUFDSCwrQkFBbUIsRUFBRTtBQUNqQixxQkFBSyxFQUFFLEtBQUs7QUFDWixxQkFBSyxFQUFFLEtBQUs7QUFDWixzQkFBTSxFQUFFLE1BQU07QUFDZCx1QkFBTyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ2hCLHNCQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDaEIseUJBQVMsRUFBRSxRQUFRO2FBQ3RCO0FBQ0QscUNBQXlCLEVBQUU7QUFDdkIsK0JBQWUsRUFBRSxlQUFlO0FBQ2hDLHVCQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7QUFDdkIsc0JBQU0sRUFBRSxDQUFDLFVBQVUsR0FBRSxLQUFLLEVBQUMsQ0FBQztBQUM1Qix3QkFBUSxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ3BCLDBCQUFVLEVBQUUsQ0FBQyxHQUFFLGVBQWUsRUFBQyxDQUFDO2FBQ25DO0FBQ0QsMkNBQStCLEVBQUU7QUFDN0Isd0JBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNwQixvQkFBSSxFQUFFLENBQUM7QUFDUCxxQkFBSyxFQUFFLENBQUM7QUFDUixtQkFBRyxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1Ysc0JBQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUNoQjtBQUNELDBDQUE4QixFQUFFO0FBQzVCLHVCQUFPLEVBQUUsQ0FBQztBQUNWLHFCQUFLLEVBQUUsQ0FBQztBQUNSLHVCQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7YUFDMUI7QUFDRCw0Q0FBZ0MsRUFBRSxFQUFFO0FBQ3BDLDJDQUErQixFQUFFO0FBQzdCLHlCQUFTLEVBQUUsT0FBTzthQUNyQjtBQUNELHlDQUE2QixFQUFFO0FBQzNCLHVCQUFPLEVBQUMsQ0FBQyxLQUFLLENBQUM7QUFDZixzQkFBTSxFQUFDLENBQUMsTUFBTSxDQUFDO2FBQ2xCO1NBQ0o7WUFDRCxjQUFjLEdBQUcsRUFBRTtZQUNuQixlQUFlLEdBQUcsRUFBRTtZQUNwQixjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLGVBQ0k7QUFBQyxtQkFBTztjQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxBQUFDO0FBQ3JCLG9CQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEFBQUM7QUFDaEMsOEJBQWMsRUFBRSxjQUFjLEFBQUM7QUFDL0IsK0JBQWUsRUFBRSxlQUFlLEFBQUM7QUFDakMsOEJBQWMsRUFBRSxjQUFjLEFBQUM7O1lBQ3RDLEtBQUssQ0FBQyxRQUFRO1NBQVcsQ0FDOUI7S0FDSjtDQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyIsImZpbGUiOiJhcF9kaWdpdGFsX2Nsb2NrX3N0eWxlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9va3VuaXNoaXRha2EvcHJvamVjdHMvYXBlbWFuLXJlYWN0LWxhYm8vYXBlbWFuLXJlYWN0LWNsb2NrL2xpYi9qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0eWxlIGZvciBBcERpZ2l0YWxDbG9ja1xuICogQGNvbnN0cnVjdG9yIEFwRGlnaXRhbENsb2NrXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB0eXBlcyA9IFJlYWN0LlByb3BUeXBlcyxcbiAgICBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKSxcbiAgICBBcFN0eWxlID0gcmVxdWlyZSgnYXBlbWFuLXJlYWN0LXN0eWxlJylbJ0FwU3R5bGUnXTtcblxuLyoqIEBsZW5kcyBBcERpZ2l0YWxDbG9jayAqL1xubGV0IEFwRGlnaXRhbENsb2NrID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIHByb3BUeXBlczoge1xuICAgICAgICBzY29wZWQ6IHR5cGVzLmJvb2wsXG4gICAgICAgIHN0eWxlOiB0eXBlcy5vYmplY3QsXG4gICAgICAgIHdpZHRoOiB0eXBlcy5udW1iZXIsXG4gICAgICAgIGhlaWdodDogdHlwZXMubnVtYmVyLFxuICAgICAgICBjb2xvcjogdHlwZXMuc3RyaW5nLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHR5cGVzLnN0cmluZ1xuXG4gICAgfSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlZDogZmFsc2UsXG4gICAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgICB3aWR0aDogMzQwLFxuICAgICAgICAgICAgaGVpZ2h0OiAyNDAsXG4gICAgICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRidcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBzID0gdGhpcyxcbiAgICAgICAgICAgIHByb3BzID0gcy5wcm9wcztcblxuICAgICAgICBsZXQgd2lkdGggPSBwcm9wcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCA9IHByb3BzLmhlaWdodCxcbiAgICAgICAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgJy5hcC1kaWdpdGFsLWNsb2NrJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGBibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogYDAgYXV0b2AsXG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1ib2FyZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGBpbmxpbmUtYmxvY2tgLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IGAycHggc29saWQgJHtjb2xvcn1gLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYHJlbGF0aXZlYCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogYCR7YmFja2dyb3VuZENvbG9yfWBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1ib2FyZC1pbm5lcic6IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGBhYnNvbHV0ZWAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IGAzMCVgLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IGAzMCVgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stZHVtbXktdGV4dCc6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGBpbmxpbmUtYmxvY2tgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stbWFpbi1kaXNwbGF5Jzoge30sXG4gICAgICAgICAgICAgICAgJy5hcC1kaWdpdGFsLWNsb2NrLXN1Yi1kaXNwbGF5Jzoge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1zdWItbGFiZWwnOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6YGJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOmAwIGF1dG9gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhID0ge30sXG4gICAgICAgICAgICBtZWRpdW1NZWRpYURhdGEgPSB7fSxcbiAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhID0ge307XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QXBTdHlsZSBzY29wZWQ9e3Byb3BzLnNjb3BlZH1cbiAgICAgICAgICAgICAgICAgICAgIGRhdGE9e2V4dGVuZChkYXRhLCBwcm9wcy5zdHlsZSl9XG4gICAgICAgICAgICAgICAgICAgICBzbWFsbE1lZGlhRGF0YT17c21hbGxNZWRpYURhdGF9XG4gICAgICAgICAgICAgICAgICAgICBtZWRpdW1NZWRpYURhdGE9e21lZGl1bU1lZGlhRGF0YX1cbiAgICAgICAgICAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhPXtsYXJnZU1lZGlhRGF0YX1cbiAgICAgICAgICAgID57cHJvcHMuY2hpbGRyZW59PC9BcFN0eWxlPlxuICAgICAgICApXG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBEaWdpdGFsQ2xvY2s7XG4iXX0=