/**
 * Style for ApDigitalClock
 * @constructor ApDigitalClock
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApDigitalClock */
let ApDigitalClock = React.createClass({
    displayName: 'ApDigitalClock',

    propTypes: {
        scoped: types.bool,
        style: types.object,
        minSize: types.number,
        maxSize: types.number,
        color: types.string

    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {},
            minSize: 80,
            maxSize: 480,
            color: '#555'
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let minSize = props.minSize,
            maxSize = props.maxSize,
            color = props.color,
            backgroundColor = props.backgroundColor;

        let data = {
            '.ap-digital-clock': {
                color: color,
                minWidth: minSize,
                minHeight: minSize,
                maxWidth: maxSize,
                maxHeight: maxSize,
                display: `block`,
                margin: `0 auto`,
                textAlign: 'center'
            },
            '.ap-digital-clock-board': {
                backgroundColor: backgroundColor,
                display: `inline-block`,
                border: `1px solid ${ color }`,
                position: `relative`
            },
            '.ap-digital-clock-board-inner': {
                position: `absolute`,
                left: 0,
                right: 0,
                top: `30%`,
                bottom: `30%`
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApDigitalClock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9kaWdpdGFsX2Nsb2NrX3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUztNQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUMxQixPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDOzs7QUFBQyxBQUd2RCxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDbkMsYUFBUyxFQUFFO0FBQ1AsY0FBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQixlQUFPLEVBQUUsS0FBSyxDQUFDLE1BQU07QUFDckIsZUFBTyxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3JCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTs7S0FFdEI7QUFDRCxtQkFBZSxFQUFFLFlBQVk7QUFDekIsZUFBTztBQUNILGtCQUFNLEVBQUUsS0FBSztBQUNiLGlCQUFLLEVBQUUsRUFBRTtBQUNULG1CQUFPLEVBQUUsRUFBRTtBQUNYLG1CQUFPLEVBQUUsR0FBRztBQUNaLGlCQUFLLEVBQUUsTUFBTTtTQUNoQixDQUFBO0tBQ0o7QUFDRCxVQUFNLEVBQUUsWUFBWTtBQUNoQixZQUFJLENBQUMsR0FBRyxJQUFJO1lBQ1IsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRXBCLFlBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPO1lBQ3ZCLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTztZQUN2QixLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUs7WUFDbkIsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7O0FBRTVDLFlBQUksSUFBSSxHQUFHO0FBQ0gsK0JBQW1CLEVBQUU7QUFDakIscUJBQUssRUFBRSxLQUFLO0FBQ1osd0JBQVEsRUFBRSxPQUFPO0FBQ2pCLHlCQUFTLEVBQUUsT0FBTztBQUNsQix3QkFBUSxFQUFFLE9BQU87QUFDakIseUJBQVMsRUFBRSxPQUFPO0FBQ2xCLHVCQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDaEIsc0JBQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztBQUNoQix5QkFBUyxFQUFFLFFBQVE7YUFDdEI7QUFDRCxxQ0FBeUIsRUFBRTtBQUN2QiwrQkFBZSxFQUFFLGVBQWU7QUFDaEMsdUJBQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztBQUN2QixzQkFBTSxFQUFFLENBQUMsVUFBVSxHQUFFLEtBQUssRUFBQyxDQUFDO0FBQzVCLHdCQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7YUFDdkI7QUFDRCwyQ0FBK0IsRUFBRTtBQUM3Qix3QkFBUSxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ3BCLG9CQUFJLEVBQUUsQ0FBQztBQUNQLHFCQUFLLEVBQUUsQ0FBQztBQUNSLG1CQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDVixzQkFBTSxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ2hCO1NBQ0o7WUFDRCxjQUFjLEdBQUcsRUFBRTtZQUNuQixlQUFlLEdBQUcsRUFBRTtZQUNwQixjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLGVBQ0k7QUFBQyxtQkFBTztjQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxBQUFDO0FBQ3JCLG9CQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEFBQUM7QUFDaEMsOEJBQWMsRUFBRSxjQUFjLEFBQUM7QUFDL0IsK0JBQWUsRUFBRSxlQUFlLEFBQUM7QUFDakMsOEJBQWMsRUFBRSxjQUFjLEFBQUM7O1lBQ3RDLEtBQUssQ0FBQyxRQUFRO1NBQVcsQ0FDOUI7S0FDSjtDQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyIsImZpbGUiOiJhcF9kaWdpdGFsX2Nsb2NrX3N0eWxlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9va3VuaXNoaXRha2EvcHJvamVjdHMvYXBlbWFuLXJlYWN0LWxhYm8vYXBlbWFuLXJlYWN0LWNsb2NrL2xpYi9qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0eWxlIGZvciBBcERpZ2l0YWxDbG9ja1xuICogQGNvbnN0cnVjdG9yIEFwRGlnaXRhbENsb2NrXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB0eXBlcyA9IFJlYWN0LlByb3BUeXBlcyxcbiAgICBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKSxcbiAgICBBcFN0eWxlID0gcmVxdWlyZSgnYXBlbWFuLXJlYWN0LXN0eWxlJylbJ0FwU3R5bGUnXTtcblxuLyoqIEBsZW5kcyBBcERpZ2l0YWxDbG9jayAqL1xubGV0IEFwRGlnaXRhbENsb2NrID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIHByb3BUeXBlczoge1xuICAgICAgICBzY29wZWQ6IHR5cGVzLmJvb2wsXG4gICAgICAgIHN0eWxlOiB0eXBlcy5vYmplY3QsXG4gICAgICAgIG1pblNpemU6IHR5cGVzLm51bWJlcixcbiAgICAgICAgbWF4U2l6ZTogdHlwZXMubnVtYmVyLFxuICAgICAgICBjb2xvcjogdHlwZXMuc3RyaW5nXG5cbiAgICB9LFxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgIG1pblNpemU6IDgwLFxuICAgICAgICAgICAgbWF4U2l6ZTogNDgwLFxuICAgICAgICAgICAgY29sb3I6ICcjNTU1J1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHMgPSB0aGlzLFxuICAgICAgICAgICAgcHJvcHMgPSBzLnByb3BzO1xuXG4gICAgICAgIGxldCBtaW5TaXplID0gcHJvcHMubWluU2l6ZSxcbiAgICAgICAgICAgIG1heFNpemUgPSBwcm9wcy5tYXhTaXplLFxuICAgICAgICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IHByb3BzLmJhY2tncm91bmRDb2xvcjtcblxuICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2snOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IG1pblNpemUsXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogbWluU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6IG1heFNpemUsXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogbWF4U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBgMCBhdXRvYCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC1kaWdpdGFsLWNsb2NrLWJvYXJkJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAke2NvbG9yfWAsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBgcmVsYXRpdmVgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stYm9hcmQtaW5uZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBgYWJzb2x1dGVgLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBgMzAlYCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBgMzAlYFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbWFsbE1lZGlhRGF0YSA9IHt9LFxuICAgICAgICAgICAgbWVkaXVtTWVkaWFEYXRhID0ge30sXG4gICAgICAgICAgICBsYXJnZU1lZGlhRGF0YSA9IHt9O1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFwU3R5bGUgc2NvcGVkPXtwcm9wcy5zY29wZWR9XG4gICAgICAgICAgICAgICAgICAgICBkYXRhPXtleHRlbmQoZGF0YSwgcHJvcHMuc3R5bGUpfVxuICAgICAgICAgICAgICAgICAgICAgc21hbGxNZWRpYURhdGE9e3NtYWxsTWVkaWFEYXRhfVxuICAgICAgICAgICAgICAgICAgICAgbWVkaXVtTWVkaWFEYXRhPXttZWRpdW1NZWRpYURhdGF9XG4gICAgICAgICAgICAgICAgICAgICBsYXJnZU1lZGlhRGF0YT17bGFyZ2VNZWRpYURhdGF9XG4gICAgICAgICAgICA+e3Byb3BzLmNoaWxkcmVufTwvQXBTdHlsZT5cbiAgICAgICAgKVxuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwRGlnaXRhbENsb2NrO1xuIl19