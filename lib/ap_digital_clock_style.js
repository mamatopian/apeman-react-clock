/**
 * Style for ApDigitalClock
 * @constructor ApDigitalClock
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApDigitalClock */
let ApDigitalClock = React.createClass({
    displayName: 'ApDigitalClock',

    propTypes: {
        scoped: types.bool,
        style: types.object,
        width: types.number,
        height: types.number,
        color: types.string,
        backgroundColor: types.string

    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {},
            width: 340,
            height: 240,
            color: '#333',
            backgroundColor: '#FFF'
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let width = props.width,
            height = props.height,
            color = props.color,
            backgroundColor = props.backgroundColor;

        let data = {
            '.ap-digital-clock': {
                color: color,
                width: width,
                height: height,
                display: `block`,
                margin: `0 auto`,
                textAlign: 'center'
            },
            '.ap-digital-clock-board': {
                backgroundColor: backgroundColor,
                display: `inline-block`,
                border: `2px solid ${ color }`,
                position: `relative`,
                background: `${ backgroundColor }`
            },
            '.ap-digital-clock-board-inner': {
                position: `absolute`,
                left: 0,
                right: 0,
                top: `30%`,
                bottom: `30%`
            },
            '.ap-digital-clock-display': {
                display: `flex`
            },
            '.ap-digital-clock-display-main': {
                display: `inline-block`,
                width: `100%`
            },
            '.ap-digital-clock-display-sub': {
                display: `inline-block`
            },
            '.ap-digital-clock-display-dummy-text': {
                opacity: 0,
                width: 1,
                display: `inline-block`
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApDigitalClock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9kaWdpdGFsX2Nsb2NrX3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUztNQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUMxQixPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDOzs7QUFBQyxBQUd2RCxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDbkMsYUFBUyxFQUFFO0FBQ1AsY0FBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQixhQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU07QUFDbkIsY0FBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3BCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQix1QkFBZSxFQUFFLEtBQUssQ0FBQyxNQUFNOztLQUVoQztBQUNELG1CQUFlLEVBQUUsWUFBWTtBQUN6QixlQUFPO0FBQ0gsa0JBQU0sRUFBRSxLQUFLO0FBQ2IsaUJBQUssRUFBRSxFQUFFO0FBQ1QsaUJBQUssRUFBRSxHQUFHO0FBQ1Ysa0JBQU0sRUFBRSxHQUFHO0FBQ1gsaUJBQUssRUFBRSxNQUFNO0FBQ2IsMkJBQWUsRUFBRSxNQUFNO1NBQzFCLENBQUE7S0FDSjtBQUNELFVBQU0sRUFBRSxZQUFZO0FBQ2hCLFlBQUksQ0FBQyxHQUFHLElBQUk7WUFDUixLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFcEIsWUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUs7WUFDbkIsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNO1lBQ3JCLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSztZQUNuQixlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7QUFFNUMsWUFBSSxJQUFJLEdBQUc7QUFDSCwrQkFBbUIsRUFBRTtBQUNqQixxQkFBSyxFQUFFLEtBQUs7QUFDWixxQkFBSyxFQUFFLEtBQUs7QUFDWixzQkFBTSxFQUFFLE1BQU07QUFDZCx1QkFBTyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ2hCLHNCQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDaEIseUJBQVMsRUFBRSxRQUFRO2FBQ3RCO0FBQ0QscUNBQXlCLEVBQUU7QUFDdkIsK0JBQWUsRUFBRSxlQUFlO0FBQ2hDLHVCQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7QUFDdkIsc0JBQU0sRUFBRSxDQUFDLFVBQVUsR0FBRSxLQUFLLEVBQUMsQ0FBQztBQUM1Qix3QkFBUSxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ3BCLDBCQUFVLEVBQUUsQ0FBQyxHQUFFLGVBQWUsRUFBQyxDQUFDO2FBQ25DO0FBQ0QsMkNBQStCLEVBQUU7QUFDN0Isd0JBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNwQixvQkFBSSxFQUFFLENBQUM7QUFDUCxxQkFBSyxFQUFFLENBQUM7QUFDUixtQkFBRyxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1Ysc0JBQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUNoQjtBQUNELHVDQUEyQixFQUFFO0FBQ3pCLHVCQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7YUFDbEI7QUFDRCw0Q0FBZ0MsRUFBRTtBQUM5Qix1QkFBTyxFQUFFLENBQUMsWUFBWSxDQUFDO0FBQ3ZCLHFCQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUM7YUFDaEI7QUFDRCwyQ0FBK0IsRUFBRTtBQUM3Qix1QkFBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2FBQzFCO0FBQ0Qsa0RBQXNDLEVBQUU7QUFDcEMsdUJBQU8sRUFBRSxDQUFDO0FBQ1YscUJBQUssRUFBRSxDQUFDO0FBQ1IsdUJBQU8sRUFBRSxDQUFDLFlBQVksQ0FBQzthQUMxQjtTQUNKO1lBQ0QsY0FBYyxHQUFHLEVBQUU7WUFDbkIsZUFBZSxHQUFHLEVBQUU7WUFDcEIsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUN4QixlQUNJO0FBQUMsbUJBQU87Y0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sQUFBQztBQUNyQixvQkFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxBQUFDO0FBQ2hDLDhCQUFjLEVBQUUsY0FBYyxBQUFDO0FBQy9CLCtCQUFlLEVBQUUsZUFBZSxBQUFDO0FBQ2pDLDhCQUFjLEVBQUUsY0FBYyxBQUFDOztZQUN0QyxLQUFLLENBQUMsUUFBUTtTQUFXLENBQzlCO0tBQ0o7Q0FDSixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiYXBfZGlnaXRhbF9jbG9ja19zdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvb2t1bmlzaGl0YWthL3Byb2plY3RzL2FwZW1hbi1yZWFjdC1sYWJvL2FwZW1hbi1yZWFjdC1jbG9jay9saWIvanN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTdHlsZSBmb3IgQXBEaWdpdGFsQ2xvY2tcbiAqIEBjb25zdHJ1Y3RvciBBcERpZ2l0YWxDbG9ja1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdHlwZXMgPSBSZWFjdC5Qcm9wVHlwZXMsXG4gICAgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJyksXG4gICAgQXBTdHlsZSA9IHJlcXVpcmUoJ2FwZW1hbi1yZWFjdC1zdHlsZScpWydBcFN0eWxlJ107XG5cbi8qKiBAbGVuZHMgQXBEaWdpdGFsQ2xvY2sgKi9cbmxldCBBcERpZ2l0YWxDbG9jayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgc2NvcGVkOiB0eXBlcy5ib29sLFxuICAgICAgICBzdHlsZTogdHlwZXMub2JqZWN0LFxuICAgICAgICB3aWR0aDogdHlwZXMubnVtYmVyLFxuICAgICAgICBoZWlnaHQ6IHR5cGVzLm51bWJlcixcbiAgICAgICAgY29sb3I6IHR5cGVzLnN0cmluZyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0eXBlcy5zdHJpbmdcblxuICAgIH0sXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICAgICAgd2lkdGg6IDM0MCxcbiAgICAgICAgICAgIGhlaWdodDogMjQwLFxuICAgICAgICAgICAgY29sb3I6ICcjMzMzJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNGRkYnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcyA9IHRoaXMsXG4gICAgICAgICAgICBwcm9wcyA9IHMucHJvcHM7XG5cbiAgICAgICAgbGV0IHdpZHRoID0gcHJvcHMud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQgPSBwcm9wcy5oZWlnaHQsXG4gICAgICAgICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gcHJvcHMuYmFja2dyb3VuZENvbG9yO1xuXG4gICAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jayc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgYmxvY2tgLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IGAwIGF1dG9gLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stYm9hcmQnOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgaW5saW5lLWJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBgMnB4IHNvbGlkICR7Y29sb3J9YCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGByZWxhdGl2ZWAsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGAke2JhY2tncm91bmRDb2xvcn1gXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stYm9hcmQtaW5uZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBgYWJzb2x1dGVgLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBgMzAlYCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBgMzAlYFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC1kaWdpdGFsLWNsb2NrLWRpc3BsYXknOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGBmbGV4YFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC1kaWdpdGFsLWNsb2NrLWRpc3BsYXktbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBgMTAwJWBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1kaXNwbGF5LXN1Yic6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2BcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1kaXNwbGF5LWR1bW15LXRleHQnOiB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgaW5saW5lLWJsb2NrYFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbWFsbE1lZGlhRGF0YSA9IHt9LFxuICAgICAgICAgICAgbWVkaXVtTWVkaWFEYXRhID0ge30sXG4gICAgICAgICAgICBsYXJnZU1lZGlhRGF0YSA9IHt9O1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFwU3R5bGUgc2NvcGVkPXtwcm9wcy5zY29wZWR9XG4gICAgICAgICAgICAgICAgICAgICBkYXRhPXtleHRlbmQoZGF0YSwgcHJvcHMuc3R5bGUpfVxuICAgICAgICAgICAgICAgICAgICAgc21hbGxNZWRpYURhdGE9e3NtYWxsTWVkaWFEYXRhfVxuICAgICAgICAgICAgICAgICAgICAgbWVkaXVtTWVkaWFEYXRhPXttZWRpdW1NZWRpYURhdGF9XG4gICAgICAgICAgICAgICAgICAgICBsYXJnZU1lZGlhRGF0YT17bGFyZ2VNZWRpYURhdGF9XG4gICAgICAgICAgICA+e3Byb3BzLmNoaWxkcmVufTwvQXBTdHlsZT5cbiAgICAgICAgKVxuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwRGlnaXRhbENsb2NrO1xuIl19