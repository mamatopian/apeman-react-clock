/**
 * Style for ApDigitalClock
 * @constructor ApDigitalClock
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApDigitalClock */
let ApDigitalClock = React.createClass({
    displayName: 'ApDigitalClock',

    propTypes: {
        scoped: types.bool,
        style: types.object,
        highlightColor: types.string,
        numberColor: types.string,
        numberWidth: types.number,
        numberHeight: types.number
    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {},
            highlightColor: '#38E',
            numberColor: '#AAA',
            numberWidth: 8,
            numberHeight: 24
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let highlightColor = props.highlightColor,
            numberColor = props.numberColor,
            numberWidth = props.numberWidth,
            numberHeight = props.numberHeight;

        let barWidth = numberWidth / 10,
            barHeight = numberHeight * 0.45;

        let data = {
            '.ap-digital-clock-number': {
                width: `${ numberWidth }px`,
                height: `${ numberHeight }px`
            },
            '.ap-digital-clock-number-bar': {
                display: `inline-block`,
                width: `${ barWidth }px`,
                height: `${ barHeight }px`,
                backgroundColor: `${ numberColor }`,
                position: 'absolute'
            },
            '.ap-digital-clock-number-bar-highlighted': {
                backgroundColor: `${ highlightColor }`
            },
            '.ap-digital-clock-number-bar-0': {}
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApDigitalClock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9kaWdpdGFsX2Nsb2NrX3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUztNQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUMxQixPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDOzs7QUFBQyxBQUd2RCxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDbkMsYUFBUyxFQUFFO0FBQ1AsY0FBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQixzQkFBYyxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQzVCLG1CQUFXLEVBQUUsS0FBSyxDQUFDLE1BQU07QUFDekIsbUJBQVcsRUFBRSxLQUFLLENBQUMsTUFBTTtBQUN6QixvQkFBWSxFQUFFLEtBQUssQ0FBQyxNQUFNO0tBQzdCO0FBQ0QsbUJBQWUsRUFBRSxZQUFZO0FBQ3pCLGVBQU87QUFDSCxrQkFBTSxFQUFFLEtBQUs7QUFDYixpQkFBSyxFQUFFLEVBQUU7QUFDVCwwQkFBYyxFQUFFLE1BQU07QUFDdEIsdUJBQVcsRUFBRSxNQUFNO0FBQ25CLHVCQUFXLEVBQUUsQ0FBQztBQUNkLHdCQUFZLEVBQUUsRUFBRTtTQUNuQixDQUFBO0tBQ0o7QUFDRCxVQUFNLEVBQUUsWUFBWTtBQUNoQixZQUFJLENBQUMsR0FBRyxJQUFJO1lBQ1IsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRXBCLFlBQUksY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjO1lBQ3JDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVztZQUMvQixXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVc7WUFDL0IsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7O0FBRXRDLFlBQUksUUFBUSxHQUFHLFdBQVcsR0FBRyxFQUFFO1lBQzNCLFNBQVMsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDOztBQUVwQyxZQUFJLElBQUksR0FBRztBQUNILHNDQUEwQixFQUFFO0FBQ3hCLHFCQUFLLEVBQUUsQ0FBQyxHQUFFLFdBQVcsRUFBQyxFQUFFLENBQUM7QUFDekIsc0JBQU0sRUFBRSxDQUFDLEdBQUUsWUFBWSxFQUFDLEVBQUUsQ0FBQzthQUM5QjtBQUNELDBDQUE4QixFQUFFO0FBQzVCLHVCQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7QUFDdkIscUJBQUssRUFBRSxDQUFDLEdBQUUsUUFBUSxFQUFDLEVBQUUsQ0FBQztBQUN0QixzQkFBTSxFQUFFLENBQUMsR0FBRSxTQUFTLEVBQUMsRUFBRSxDQUFDO0FBQ3hCLCtCQUFlLEVBQUUsQ0FBQyxHQUFFLFdBQVcsRUFBQyxDQUFDO0FBQ2pDLHdCQUFRLEVBQUUsVUFBVTthQUN2QjtBQUNELHNEQUEwQyxFQUFFO0FBQ3hDLCtCQUFlLEVBQUUsQ0FBQyxHQUFFLGNBQWMsRUFBQyxDQUFDO2FBQ3ZDO0FBQ0QsNENBQWdDLEVBQUUsRUFFakM7U0FDSjtZQUNELGNBQWMsR0FBRyxFQUFFO1lBQ25CLGVBQWUsR0FBRyxFQUFFO1lBQ3BCLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDeEIsZUFDSTtBQUFDLG1CQUFPO2NBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEFBQUM7QUFDckIsb0JBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQUFBQztBQUNoQyw4QkFBYyxFQUFFLGNBQWMsQUFBQztBQUMvQiwrQkFBZSxFQUFFLGVBQWUsQUFBQztBQUNqQyw4QkFBYyxFQUFFLGNBQWMsQUFBQzs7WUFDdEMsS0FBSyxDQUFDLFFBQVE7U0FBVyxDQUM5QjtLQUNKO0NBQ0osQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDIiwiZmlsZSI6ImFwX2RpZ2l0YWxfY2xvY2tfc3R5bGUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL29rdW5pc2hpdGFrYS9wcm9qZWN0cy9hcGVtYW4tcmVhY3QtbGFiby9hcGVtYW4tcmVhY3QtY2xvY2svbGliL2pzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwRGlnaXRhbENsb2NrXG4gKiBAY29uc3RydWN0b3IgQXBEaWdpdGFsQ2xvY2tcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHR5cGVzID0gUmVhY3QuUHJvcFR5cGVzLFxuICAgIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpLFxuICAgIEFwU3R5bGUgPSByZXF1aXJlKCdhcGVtYW4tcmVhY3Qtc3R5bGUnKVsnQXBTdHlsZSddO1xuXG4vKiogQGxlbmRzIEFwRGlnaXRhbENsb2NrICovXG5sZXQgQXBEaWdpdGFsQ2xvY2sgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIHNjb3BlZDogdHlwZXMuYm9vbCxcbiAgICAgICAgc3R5bGU6IHR5cGVzLm9iamVjdCxcbiAgICAgICAgaGlnaGxpZ2h0Q29sb3I6IHR5cGVzLnN0cmluZyxcbiAgICAgICAgbnVtYmVyQ29sb3I6IHR5cGVzLnN0cmluZyxcbiAgICAgICAgbnVtYmVyV2lkdGg6IHR5cGVzLm51bWJlcixcbiAgICAgICAgbnVtYmVySGVpZ2h0OiB0eXBlcy5udW1iZXJcbiAgICB9LFxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgIGhpZ2hsaWdodENvbG9yOiAnIzM4RScsXG4gICAgICAgICAgICBudW1iZXJDb2xvcjogJyNBQUEnLFxuICAgICAgICAgICAgbnVtYmVyV2lkdGg6IDgsXG4gICAgICAgICAgICBudW1iZXJIZWlnaHQ6IDI0XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcyA9IHRoaXMsXG4gICAgICAgICAgICBwcm9wcyA9IHMucHJvcHM7XG5cbiAgICAgICAgbGV0IGhpZ2hsaWdodENvbG9yID0gcHJvcHMuaGlnaGxpZ2h0Q29sb3IsXG4gICAgICAgICAgICBudW1iZXJDb2xvciA9IHByb3BzLm51bWJlckNvbG9yLFxuICAgICAgICAgICAgbnVtYmVyV2lkdGggPSBwcm9wcy5udW1iZXJXaWR0aCxcbiAgICAgICAgICAgIG51bWJlckhlaWdodCA9IHByb3BzLm51bWJlckhlaWdodDtcblxuICAgICAgICBsZXQgYmFyV2lkdGggPSBudW1iZXJXaWR0aCAvIDEwLFxuICAgICAgICAgICAgYmFySGVpZ2h0ID0gbnVtYmVySGVpZ2h0ICogMC40NTtcblxuICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stbnVtYmVyJzoge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogYCR7bnVtYmVyV2lkdGh9cHhgLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGAke251bWJlckhlaWdodH1weGBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1udW1iZXItYmFyJzoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgaW5saW5lLWJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGAke2JhcldpZHRofXB4YCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtiYXJIZWlnaHR9cHhgLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGAke251bWJlckNvbG9yfWAsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stbnVtYmVyLWJhci1oaWdobGlnaHRlZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgJHtoaWdobGlnaHRDb2xvcn1gXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stbnVtYmVyLWJhci0wJzoge1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhID0ge30sXG4gICAgICAgICAgICBtZWRpdW1NZWRpYURhdGEgPSB7fSxcbiAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhID0ge307XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QXBTdHlsZSBzY29wZWQ9e3Byb3BzLnNjb3BlZH1cbiAgICAgICAgICAgICAgICAgICAgIGRhdGE9e2V4dGVuZChkYXRhLCBwcm9wcy5zdHlsZSl9XG4gICAgICAgICAgICAgICAgICAgICBzbWFsbE1lZGlhRGF0YT17c21hbGxNZWRpYURhdGF9XG4gICAgICAgICAgICAgICAgICAgICBtZWRpdW1NZWRpYURhdGE9e21lZGl1bU1lZGlhRGF0YX1cbiAgICAgICAgICAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhPXtsYXJnZU1lZGlhRGF0YX1cbiAgICAgICAgICAgID57cHJvcHMuY2hpbGRyZW59PC9BcFN0eWxlPlxuICAgICAgICApXG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBEaWdpdGFsQ2xvY2s7XG4iXX0=