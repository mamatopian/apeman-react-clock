/**
 * Style for ApDigitalClock
 * @constructor ApDigitalClock
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApDigitalClock */
let ApDigitalClock = React.createClass({
    displayName: 'ApDigitalClock',

    propTypes: {
        scoped: types.bool,
        style: types.object,
        minSize: types.number,
        maxSize: types.number,
        color: types.string,
        backgroundColor: types.string

    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {},
            minSize: 80,
            maxSize: 480,
            color: '#555',
            backgroundColor: '#FFF'
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let minSize = props.minSize,
            maxSize = props.maxSize,
            color = props.color,
            backgroundColor = props.backgroundColor;

        let data = {
            '.ap-digital-clock': {
                color: color,
                minWidth: minSize,
                minHeight: minSize,
                maxWidth: maxSize,
                maxHeight: maxSize,
                display: `block`,
                margin: `0 auto`,
                textAlign: 'center'
            },
            '.ap-digital-clock-board': {
                backgroundColor: backgroundColor,
                display: `inline-block`,
                border: `2px solid ${ color }`,
                position: `relative`,
                background: `${ backgroundColor }`
            },
            '.ap-digital-clock-board-inner': {
                position: `absolute`,
                left: 0,
                right: 0,
                top: `30%`,
                bottom: `30%`
            },
            '.ap-digital-clock-main': {
                display: `inline-block`
            },
            '.ap-digital-clock-sub': {
                display: `inline-block`
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApDigitalClock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9kaWdpdGFsX2Nsb2NrX3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUztNQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUMxQixPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDOzs7QUFBQyxBQUd2RCxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDbkMsYUFBUyxFQUFFO0FBQ1AsY0FBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQixlQUFPLEVBQUUsS0FBSyxDQUFDLE1BQU07QUFDckIsZUFBTyxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3JCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQix1QkFBZSxFQUFFLEtBQUssQ0FBQyxNQUFNOztLQUVoQztBQUNELG1CQUFlLEVBQUUsWUFBWTtBQUN6QixlQUFPO0FBQ0gsa0JBQU0sRUFBRSxLQUFLO0FBQ2IsaUJBQUssRUFBRSxFQUFFO0FBQ1QsbUJBQU8sRUFBRSxFQUFFO0FBQ1gsbUJBQU8sRUFBRSxHQUFHO0FBQ1osaUJBQUssRUFBRSxNQUFNO0FBQ2IsMkJBQWUsRUFBRSxNQUFNO1NBQzFCLENBQUE7S0FDSjtBQUNELFVBQU0sRUFBRSxZQUFZO0FBQ2hCLFlBQUksQ0FBQyxHQUFHLElBQUk7WUFDUixLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFcEIsWUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU87WUFDdkIsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPO1lBQ3ZCLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSztZQUNuQixlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7QUFFNUMsWUFBSSxJQUFJLEdBQUc7QUFDSCwrQkFBbUIsRUFBRTtBQUNqQixxQkFBSyxFQUFFLEtBQUs7QUFDWix3QkFBUSxFQUFFLE9BQU87QUFDakIseUJBQVMsRUFBRSxPQUFPO0FBQ2xCLHdCQUFRLEVBQUUsT0FBTztBQUNqQix5QkFBUyxFQUFFLE9BQU87QUFDbEIsdUJBQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztBQUNoQixzQkFBTSxFQUFFLENBQUMsTUFBTSxDQUFDO0FBQ2hCLHlCQUFTLEVBQUUsUUFBUTthQUN0QjtBQUNELHFDQUF5QixFQUFFO0FBQ3ZCLCtCQUFlLEVBQUUsZUFBZTtBQUNoQyx1QkFBTyxFQUFFLENBQUMsWUFBWSxDQUFDO0FBQ3ZCLHNCQUFNLEVBQUUsQ0FBQyxVQUFVLEdBQUUsS0FBSyxFQUFDLENBQUM7QUFDNUIsd0JBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNwQiwwQkFBVSxFQUFFLENBQUMsR0FBRSxlQUFlLEVBQUMsQ0FBQzthQUNuQztBQUNELDJDQUErQixFQUFFO0FBQzdCLHdCQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDcEIsb0JBQUksRUFBRSxDQUFDO0FBQ1AscUJBQUssRUFBRSxDQUFDO0FBQ1IsbUJBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNWLHNCQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDaEI7QUFDRCxvQ0FBd0IsRUFBRTtBQUN0Qix1QkFBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2FBQzFCO0FBQ0QsbUNBQXVCLEVBQUU7QUFDckIsdUJBQU8sRUFBRSxDQUFDLFlBQVksQ0FBQzthQUMxQjtTQUNKO1lBQ0QsY0FBYyxHQUFHLEVBQUU7WUFDbkIsZUFBZSxHQUFHLEVBQUU7WUFDcEIsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUN4QixlQUNJO0FBQUMsbUJBQU87Y0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sQUFBQztBQUNyQixvQkFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxBQUFDO0FBQ2hDLDhCQUFjLEVBQUUsY0FBYyxBQUFDO0FBQy9CLCtCQUFlLEVBQUUsZUFBZSxBQUFDO0FBQ2pDLDhCQUFjLEVBQUUsY0FBYyxBQUFDOztZQUN0QyxLQUFLLENBQUMsUUFBUTtTQUFXLENBQzlCO0tBQ0o7Q0FDSixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiYXBfZGlnaXRhbF9jbG9ja19zdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvb2t1bmlzaGl0YWthL3Byb2plY3RzL2FwZW1hbi1yZWFjdC1sYWJvL2FwZW1hbi1yZWFjdC1jbG9jay9saWIvanN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTdHlsZSBmb3IgQXBEaWdpdGFsQ2xvY2tcbiAqIEBjb25zdHJ1Y3RvciBBcERpZ2l0YWxDbG9ja1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdHlwZXMgPSBSZWFjdC5Qcm9wVHlwZXMsXG4gICAgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJyksXG4gICAgQXBTdHlsZSA9IHJlcXVpcmUoJ2FwZW1hbi1yZWFjdC1zdHlsZScpWydBcFN0eWxlJ107XG5cbi8qKiBAbGVuZHMgQXBEaWdpdGFsQ2xvY2sgKi9cbmxldCBBcERpZ2l0YWxDbG9jayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgc2NvcGVkOiB0eXBlcy5ib29sLFxuICAgICAgICBzdHlsZTogdHlwZXMub2JqZWN0LFxuICAgICAgICBtaW5TaXplOiB0eXBlcy5udW1iZXIsXG4gICAgICAgIG1heFNpemU6IHR5cGVzLm51bWJlcixcbiAgICAgICAgY29sb3I6IHR5cGVzLnN0cmluZyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0eXBlcy5zdHJpbmdcblxuICAgIH0sXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICAgICAgbWluU2l6ZTogODAsXG4gICAgICAgICAgICBtYXhTaXplOiA0ODAsXG4gICAgICAgICAgICBjb2xvcjogJyM1NTUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRidcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBzID0gdGhpcyxcbiAgICAgICAgICAgIHByb3BzID0gcy5wcm9wcztcblxuICAgICAgICBsZXQgbWluU2l6ZSA9IHByb3BzLm1pblNpemUsXG4gICAgICAgICAgICBtYXhTaXplID0gcHJvcHMubWF4U2l6ZSxcbiAgICAgICAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgJy5hcC1kaWdpdGFsLWNsb2NrJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIG1pbldpZHRoOiBtaW5TaXplLFxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6IG1pblNpemUsXG4gICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiBtYXhTaXplLFxuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6IG1heFNpemUsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGBibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogYDAgYXV0b2AsXG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1ib2FyZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGBpbmxpbmUtYmxvY2tgLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IGAycHggc29saWQgJHtjb2xvcn1gLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYHJlbGF0aXZlYCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogYCR7YmFja2dyb3VuZENvbG9yfWBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1ib2FyZC1pbm5lcic6IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGBhYnNvbHV0ZWAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IGAzMCVgLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IGAzMCVgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2BcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1zdWInOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGBpbmxpbmUtYmxvY2tgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhID0ge30sXG4gICAgICAgICAgICBtZWRpdW1NZWRpYURhdGEgPSB7fSxcbiAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhID0ge307XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QXBTdHlsZSBzY29wZWQ9e3Byb3BzLnNjb3BlZH1cbiAgICAgICAgICAgICAgICAgICAgIGRhdGE9e2V4dGVuZChkYXRhLCBwcm9wcy5zdHlsZSl9XG4gICAgICAgICAgICAgICAgICAgICBzbWFsbE1lZGlhRGF0YT17c21hbGxNZWRpYURhdGF9XG4gICAgICAgICAgICAgICAgICAgICBtZWRpdW1NZWRpYURhdGE9e21lZGl1bU1lZGlhRGF0YX1cbiAgICAgICAgICAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhPXtsYXJnZU1lZGlhRGF0YX1cbiAgICAgICAgICAgID57cHJvcHMuY2hpbGRyZW59PC9BcFN0eWxlPlxuICAgICAgICApXG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBEaWdpdGFsQ2xvY2s7XG4iXX0=