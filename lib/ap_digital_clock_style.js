/**
 * Style for ApDigitalClock
 * @constructor ApDigitalClock
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApDigitalClock */
let ApDigitalClock = React.createClass({
    displayName: 'ApDigitalClock',

    propTypes: {
        scoped: types.bool,
        style: types.object,
        width: types.number,
        height: types.number,
        color: types.string,
        backgroundColor: types.string

    },
    getDefaultProps: function () {
        return {
            scoped: false,
            style: {},
            width: 340,
            height: 240,
            color: '#333',
            backgroundColor: '#FFF'
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let width = props.width,
            height = props.height,
            color = props.color,
            backgroundColor = props.backgroundColor;

        let data = {
            '.ap-digital-clock': {
                color: color,
                width: width,
                height: height,
                display: `block`,
                margin: `0 auto`,
                textAlign: 'center'
            },
            '.ap-digital-clock-board': {
                backgroundColor: backgroundColor,
                display: `inline-block`,
                border: `2px solid ${ color }`,
                position: `relative`,
                background: `${ backgroundColor }`
            },
            '.ap-digital-clock-board-inner': {
                display: `inline-block`,
                verticalAlign: `middle`
            },
            '.ap-digital-clock-dummy-text': {
                opacity: 0,
                width: 1,
                display: `inline-block`,
                verticalAlign: `middle`,
                marginRight: `-1px`,
                whiteSpace: `pre`,
                overflow: `hidden`
            },
            '.ap-digital-clock-main-display': {},
            '.ap-digital-clock-sub-display': {
                overflow: `hidden`,
                textAlign: `right`
            },
            '.ap-digital-clock-sub-label': {
                display: `block`,
                margin: `2px auto`
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});

module.exports = ApDigitalClock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF9kaWdpdGFsX2Nsb2NrX3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUztNQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUMxQixPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDOzs7QUFBQyxBQUd2RCxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDbkMsYUFBUyxFQUFFO0FBQ1AsY0FBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQixhQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU07QUFDbkIsY0FBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3BCLGFBQUssRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNuQix1QkFBZSxFQUFFLEtBQUssQ0FBQyxNQUFNOztLQUVoQztBQUNELG1CQUFlLEVBQUUsWUFBWTtBQUN6QixlQUFPO0FBQ0gsa0JBQU0sRUFBRSxLQUFLO0FBQ2IsaUJBQUssRUFBRSxFQUFFO0FBQ1QsaUJBQUssRUFBRSxHQUFHO0FBQ1Ysa0JBQU0sRUFBRSxHQUFHO0FBQ1gsaUJBQUssRUFBRSxNQUFNO0FBQ2IsMkJBQWUsRUFBRSxNQUFNO1NBQzFCLENBQUE7S0FDSjtBQUNELFVBQU0sRUFBRSxZQUFZO0FBQ2hCLFlBQUksQ0FBQyxHQUFHLElBQUk7WUFDUixLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFcEIsWUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUs7WUFDbkIsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNO1lBQ3JCLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSztZQUNuQixlQUFlLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7QUFFNUMsWUFBSSxJQUFJLEdBQUc7QUFDSCwrQkFBbUIsRUFBRTtBQUNqQixxQkFBSyxFQUFFLEtBQUs7QUFDWixxQkFBSyxFQUFFLEtBQUs7QUFDWixzQkFBTSxFQUFFLE1BQU07QUFDZCx1QkFBTyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ2hCLHNCQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDaEIseUJBQVMsRUFBRSxRQUFRO2FBQ3RCO0FBQ0QscUNBQXlCLEVBQUU7QUFDdkIsK0JBQWUsRUFBRSxlQUFlO0FBQ2hDLHVCQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7QUFDdkIsc0JBQU0sRUFBRSxDQUFDLFVBQVUsR0FBRSxLQUFLLEVBQUMsQ0FBQztBQUM1Qix3QkFBUSxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ3BCLDBCQUFVLEVBQUUsQ0FBQyxHQUFFLGVBQWUsRUFBQyxDQUFDO2FBQ25DO0FBQ0QsMkNBQStCLEVBQUU7QUFDN0IsdUJBQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztBQUN2Qiw2QkFBYSxFQUFFLENBQUMsTUFBTSxDQUFDO2FBQzFCO0FBQ0QsMENBQThCLEVBQUU7QUFDNUIsdUJBQU8sRUFBRSxDQUFDO0FBQ1YscUJBQUssRUFBRSxDQUFDO0FBQ1IsdUJBQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztBQUN2Qiw2QkFBYSxFQUFFLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLDJCQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDbkIsMEJBQVUsRUFBQyxDQUFDLEdBQUcsQ0FBQztBQUNoQix3QkFBUSxFQUFFLENBQUMsTUFBTSxDQUFDO2FBQ3JCO0FBQ0QsNENBQWdDLEVBQUUsRUFBRTtBQUNwQywyQ0FBK0IsRUFBRTtBQUM3Qix3QkFBUSxFQUFFLENBQUMsTUFBTSxDQUFDO0FBQ2xCLHlCQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7YUFDckI7QUFDRCx5Q0FBNkIsRUFBRTtBQUMzQix1QkFBTyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ2hCLHNCQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUM7YUFDckI7U0FDSjtZQUNELGNBQWMsR0FBRyxFQUFFO1lBQ25CLGVBQWUsR0FBRyxFQUFFO1lBQ3BCLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDeEIsZUFDSTtBQUFDLG1CQUFPO2NBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEFBQUM7QUFDckIsb0JBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQUFBQztBQUNoQyw4QkFBYyxFQUFFLGNBQWMsQUFBQztBQUMvQiwrQkFBZSxFQUFFLGVBQWUsQUFBQztBQUNqQyw4QkFBYyxFQUFFLGNBQWMsQUFBQzs7WUFDdEMsS0FBSyxDQUFDLFFBQVE7U0FBVyxDQUM5QjtLQUNKO0NBQ0osQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDIiwiZmlsZSI6ImFwX2RpZ2l0YWxfY2xvY2tfc3R5bGUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL29rdW5pc2hpdGFrYS9wcm9qZWN0cy9hcGVtYW4tcmVhY3QtbGFiby9hcGVtYW4tcmVhY3QtY2xvY2svbGliL2pzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwRGlnaXRhbENsb2NrXG4gKiBAY29uc3RydWN0b3IgQXBEaWdpdGFsQ2xvY2tcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHR5cGVzID0gUmVhY3QuUHJvcFR5cGVzLFxuICAgIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpLFxuICAgIEFwU3R5bGUgPSByZXF1aXJlKCdhcGVtYW4tcmVhY3Qtc3R5bGUnKVsnQXBTdHlsZSddO1xuXG4vKiogQGxlbmRzIEFwRGlnaXRhbENsb2NrICovXG5sZXQgQXBEaWdpdGFsQ2xvY2sgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIHNjb3BlZDogdHlwZXMuYm9vbCxcbiAgICAgICAgc3R5bGU6IHR5cGVzLm9iamVjdCxcbiAgICAgICAgd2lkdGg6IHR5cGVzLm51bWJlcixcbiAgICAgICAgaGVpZ2h0OiB0eXBlcy5udW1iZXIsXG4gICAgICAgIGNvbG9yOiB0eXBlcy5zdHJpbmcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdHlwZXMuc3RyaW5nXG5cbiAgICB9LFxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgIHdpZHRoOiAzNDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDI0MCxcbiAgICAgICAgICAgIGNvbG9yOiAnIzMzMycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkZGJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHMgPSB0aGlzLFxuICAgICAgICAgICAgcHJvcHMgPSBzLnByb3BzO1xuXG4gICAgICAgIGxldCB3aWR0aCA9IHByb3BzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0LFxuICAgICAgICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IHByb3BzLmJhY2tncm91bmRDb2xvcjtcblxuICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2snOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBgMCBhdXRvYCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC1kaWdpdGFsLWNsb2NrLWJvYXJkJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogYDJweCBzb2xpZCAke2NvbG9yfWAsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBgcmVsYXRpdmVgLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBgJHtiYWNrZ3JvdW5kQ29sb3J9YFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC1kaWdpdGFsLWNsb2NrLWJvYXJkLWlubmVyJzoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgaW5saW5lLWJsb2NrYCxcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbjogYG1pZGRsZWBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1kdW1teS10ZXh0Jzoge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYGlubGluZS1ibG9ja2AsXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246IGBtaWRkbGVgLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogYC0xcHhgLFxuICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOmBwcmVgLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogYGhpZGRlbmBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICcuYXAtZGlnaXRhbC1jbG9jay1tYWluLWRpc3BsYXknOiB7fSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stc3ViLWRpc3BsYXknOiB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiBgaGlkZGVuYCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBgcmlnaHRgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnLmFwLWRpZ2l0YWwtY2xvY2stc3ViLWxhYmVsJzoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgYmxvY2tgLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IGAycHggYXV0b2BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc21hbGxNZWRpYURhdGEgPSB7fSxcbiAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YSA9IHt9LFxuICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGEgPSB7fTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcFN0eWxlIHNjb3BlZD17cHJvcHMuc2NvcGVkfVxuICAgICAgICAgICAgICAgICAgICAgZGF0YT17ZXh0ZW5kKGRhdGEsIHByb3BzLnN0eWxlKX1cbiAgICAgICAgICAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhPXtzbWFsbE1lZGlhRGF0YX1cbiAgICAgICAgICAgICAgICAgICAgIG1lZGl1bU1lZGlhRGF0YT17bWVkaXVtTWVkaWFEYXRhfVxuICAgICAgICAgICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGE9e2xhcmdlTWVkaWFEYXRhfVxuICAgICAgICAgICAgPntwcm9wcy5jaGlsZHJlbn08L0FwU3R5bGU+XG4gICAgICAgIClcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcERpZ2l0YWxDbG9jaztcbiJdfQ==